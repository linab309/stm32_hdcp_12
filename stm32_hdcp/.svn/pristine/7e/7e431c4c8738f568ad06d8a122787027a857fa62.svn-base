/****************************************Copyright (c)****************************************************
**                                      
**                                 http://www.powermcu.com
**
**--------------File Info---------------------------------------------------------------------------------
** File name:               uctsk_LWIP.c
** Descriptions:            The uctsk_LWIP application function
**
**--------------------------------------------------------------------------------------------------------
** Created by:              AVRman
** Created date:            2011-3-2
** Version:                 v1.0
** Descriptions:            The original version
**
**--------------------------------------------------------------------------------------------------------
** Modified by:             
** Modified date:           
** Version:                 
** Descriptions:            
**
*********************************************************************************************************/

/* Includes ------------------------------------------------------------------*/
#include "search.h"
#include "webpage.h"
#include <includes.h> 
/* lwIP includes. */
#include "lwip/api.h"
#include "lwip/tcpip.h"
#include "lwip/memp.h"
#include "lwip/stats.h"
#include "netif/loopif.h"
#include "ip.h"
#include "sockets.h"
#include "uCOS-II/uc-cpu/cpu.h"



#define host_port 80 // 8000
/* Private variables ---------------------------------------------------------*/
static  OS_STK  AppLWIPTaskStk[APP_TASK_LWIP_STK_SIZE];
uint8_t webpage [sizeof(WebSide)];
extern struct netif _netif;

/* Private function prototypes -----------------------------------------------*/
static  void    uctsk_LWIP  (void *pdata);
static  void    ADC_Configuration(void);
static  void    vHandler_HTTP(struct netconn  *pstConn);
static  void    __Handler_HTTPGet(struct netconn  *pstConn);


void  App_LWIPTaskCreate (void)
{
    CPU_INT08U  os_err;

	os_err = os_err; /* prevent warning... */

	os_err = OSTaskCreate((void (*)(void *)) uctsk_LWIP,				
                          (void          * ) 0,							
                          (OS_STK        * )&AppLWIPTaskStk[APP_TASK_LWIP_STK_SIZE - 1],		
                          (INT8U           ) APP_TASK_LWIP_PRIO  );							

	#if OS_TASK_NAME_EN > 0
    	OSTaskNameSet(APP_TASK_LWIP_PRIO, "Task LWIP", &os_err);
	#endif
}

#if 1
u16_t bindport2 = 2002;
void recv_send_subroutine(void *p);
static  void    uctsk_LWIP(void *pdata)
{

	int sock, err, NewSock, len;
	struct sockaddr_in client_addr,server_addr;


	Init_lwIP();

	if ((sock = lwip_socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		return;
	}

	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(bindport2);
	server_addr.sin_addr.s_addr = INADDR_ANY;

	if (lwip_bind(sock, (struct sockaddr *)&server_addr, sizeof (server_addr)) < 0)
	{
	return;
	}


	lwip_listen(sock,5);

	len = sizeof(client_addr);

	while (1)
	{
		NewSock = lwip_accept(sock, (struct sockaddr *)&client_addr, &len);
		recv_send_subroutine((void *)NewSock);
		lwip_close(sock);
	}   
}
//------------------------------------------------
void recv_send_subroutine(void *p)
{
	int sock = (int)p;
	#define SEND_BUF_SIZE  256
	char send_buf[SEND_BUF_SIZE];
	int i,j,MsgLen;

	//for(j=0;j<4;j++)
	for(j=0;j<1;j++)
	{
		for(i=0;i<=256;i++)
		{
			send_buf[i]='0';
		}
		MsgLen = lwip_recv(sock, send_buf, SEND_BUF_SIZE, 0);
		//lwip_send(sock, send_buf, MsgLen, 0);
	
		if(send_buf[0] == 'q')
		{
			break;
		}
		
	}	
}



#endif
#if 0
static  void    uctsk_LWIP(void *pdata)
{
	


	struct sockaddr_in servaddr,cliaddr;//socked地址数据结构
	int sockfd;
	unsigned char data[100]={0,1,2,3,4,5,6,7,8,9,0,0,0};//要发送的数据
	int ret;

	Init_lwIP();
	//while(1)
	//	OSTimeDly(10);

	sockfd=lwip_socket(AF_INET,SOCK_DGRAM,0);//创建socket 连接
	printf("lwip_socket creat sockfd=%d\r\n",sockfd);
	servaddr.sin_family=AF_INET;		//给本地服务器的地址数据结构赋值
	servaddr.sin_addr.s_addr=htonl(INADDR_ANY);
	servaddr.sin_port=htons(host_port);

	ret=lwip_bind(sockfd,(struct sockaddr *)&servaddr,sizeof(servaddr)); //将本地服务器socket与地址进行绑定
	printf("bind ret=%d\r\n",ret);


	cliaddr.sin_family=AF_INET;//目地主机的地址收据结构这里是192.168.1.200 目地端口10000
	cliaddr.sin_addr.s_addr=inet_addr("192.168.1.103");
	cliaddr.sin_port=htons(host_port);


	while(1){
		ret=lwip_sendto(sockfd,data,sizeof(data),0,(struct sockaddr *)&cliaddr,sizeof(cliaddr));//发送udp包
		printf("sendto ret=%d\r\n",ret);
		OSTimeDlyHMSM(0, 0, 1, 0);	 /* 200 MS  */
	}




}
#endif
/*******************************************************************************
* Function Name  : vHandler_HTTP
* Description    : HTTP处理
* Input          : - pstConn: 指向struct netconn结构的指针
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
static void vHandler_HTTP(struct netconn  *pstConn)
{
	struct netbuf 		*__pstNetbuf;
	INT8S			*__pbData;
	u16_t			__s32Len;

 	__pstNetbuf = netconn_recv(pstConn);
	if(__pstNetbuf != NULL)
	{
		netbuf_data (__pstNetbuf, (void *)&__pbData, &__s32Len );

		if( strstr( (void *)__pbData, "GET" ) != NULL )
		{
			__Handler_HTTPGet(pstConn); 
	    }
	}
	netbuf_delete(__pstNetbuf);	
	netconn_close(pstConn);
}

/*******************************************************************************
* Function Name  : __Handler_HTTPGet
* Description    : 处理HTTP协议的GET请求
* Input          : - pstConn: 指向struct netconn结构的指针
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
static void __Handler_HTTPGet(struct netconn  *pstConn)
{
    static uint16_t pagecount = 0;
	uint16_t AD_value;
	int8_t *ptr;

	if( ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET )
	{
		AD_value = ADC_GetConversionValue(ADC1);
	}

	memcpy ( webpage , WebSide ,sizeof(WebSide) );

	if( ( ptr = memstrExt( (void *)webpage,"AD8%",strlen("AD8%"),sizeof(webpage)) ) != NULL )
	{
		sprintf( (void *)ptr, "%3d", AD_value);       /* insert AD converter value */
	}	

	if( ( ptr = memstrExt( (void *)webpage,"AD7%",strlen("AD7%"),sizeof(webpage)) ) != NULL )
	{ 
		AD_value = ( AD_value * 100 ) / 4000;
		* ( ptr + 0 ) = '0' + AD_value / 100;
		* ( ptr + 1 ) = '0' + ( AD_value / 10 ) % 10;
		* ( ptr + 2 ) = '0' + AD_value % 10;
	}

	if( ( ptr = memstrExt( (void *)webpage,"AD1%",strlen("AD1%"),sizeof(webpage)) ) != NULL )
	{ 
		sprintf( (void *)ptr, "%3u", ++pagecount );  
	}		
	netconn_write(pstConn, "HTTP/1.1 200 OK\r\nContent-type: text/html\r\n\r\n", \
	              strlen("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n\r\n"), NETCONN_COPY);

    netconn_write(pstConn, webpage, sizeof(webpage), NETCONN_COPY);	/* HTTP网页 */
}

/*******************************************************************************
* Function Name  : ADC_Configuration
* Description    : Configure the ADC.
* Input          : None
* Output         : None
* Return         : None
* Attention		 : None
*******************************************************************************/
static void ADC_Configuration(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
	
	/* Configure PC.5 (ADC Channel15) as analog input -------------------------*/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOC, &GPIO_InitStructure);   
	
	/* ADC1 configuration ------------------------------------------------------*/
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	                     /* 独立模式 */
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;		 	                 /* 连续多通道模式 */
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;	                     /* 连续转换 */
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;      /* 转换不受外界决定 */
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;		             /* 右对齐 */
	ADC_InitStructure.ADC_NbrOfChannel = 1;					                 /* 扫描通道数 */
	ADC_Init(ADC1, &ADC_InitStructure);
	
	/* ADC1 regular channel15 configuration */ 
	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 1, ADC_SampleTime_71Cycles5);	
	ADC_Cmd(ADC1, ENABLE);                                                   /* Enable ADC1 */                      
	ADC_SoftwareStartConvCmd(ADC1,ENABLE);                                   /* 使能转换开始 */
}

/*********************************************************************************************************
      END FILE
*********************************************************************************************************/

